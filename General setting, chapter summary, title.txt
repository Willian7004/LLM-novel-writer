User:Write a Python programme according to the following requirements, check the programme after answering and modify the programme if it is wrong Note: 1. For the folder mentioned later, create the folder if it doesn't exist 2. The functions mentioned later are located in api.py in the current directory, which needs to be imported and the corresponding functions called. Functions include input and output functions, save and read files through this module to achieve the function. Function parameters for the previous steps to create the corresponding name of the string, all parameters for the string form 3. Save and read the file using utf-8 encoding, the file does not exist, then create a file, save the file to cover the contents of the program steps: 1. Print "Input summary and chapter number", the user input string, including Outline string and a blank space after the input of the number num, outline string is saved to the current directory in the outline folder in the outline.txt, the number num is saved to the current directory in the setting folder in the num.txt 2. Call the function setting (outline) to return to setting string, print the setting string and save the setting string to the setting folder in the current directory, setting.txt 3. Print "Enter y to confirm or enter modifications", if the user enters y, then this step is skipped, and if the user enters anything else, then modify_setting(outline) will be called. setting(line,setting,text) function, text for the user input content, the function outputs the setting string, print the setting string and the setting string is saved to the current directory setting folder setting.txt, repeat the step until the user inputs y 4. Call the function chapters(setting,num,online) to return the chapters string, print the chapters string and save the chapters string to the current directory in the online folder of the chapters.txt 5. Print "Enter y to confirm or input Modify comments", the user input y then skip this step, input other content then call modify_chapters(text,num,chapters) function, text for the user input content, function output chapters string, print chapters string and save chapters string to the current directory outline folder chapters.txt. string and save the chapters to the current directory in the online folder chapters.txt, repeat this step until the user input y 6. chapters string contains a number of figures, split by line feed and split the contents of the current directory saved to the current directory in the online folder in order to the beginning of each section of the content of the number of names of the txt file. 7. Call the function title (setting, chapters) to return to the title string, print the title string and save the title string to the current directory under the title folder title.txt 8. Print "enter y to determine or enter the changes". user input y then skip this step, input other content then call modify_title (setting, chapters, title, text) function, text for the user input content, the function output title string, print the title string and save the title string to the current directory under the title folder title. title.txt in the title folder of the current directory, repeat this step until the user inputs y.

Assistant:The following is a Python programme written according to your requirements:

```python
import os
import api

def ensure_directory_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def save_to_file(file_path, content):
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(content)

def read_from_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def main():
    # Step 1: Input outline and number of chapters
    print("Enter summary and number of chapters")
    input_data = input().strip()
    outline, num = input_data.split(maxsplit=1)
    num = int(num)

    ensure_directory_exists('outline')
    ensure_directory_exists('setting')

    save_to_file('outline/outline.txt', outline)
    save_to_file('setting/num.txt', str(num))

    # Step 2: Call setting function
    setting_str = api.setting(outline)
    print(setting_str)
    save_to_file('setting/setting.txt', setting_str)

    # Step 3: Modify setting if needed
    while True:
        print("Enter y to confirm or enter changes")
        user_input = input().strip()
        if user_input.lower() == 'y':
            break
        setting_str = api.modify_setting(outline, setting_str, user_input)
        print(setting_str)
        save_to_file('setting/setting.txt', setting_str)

    # Step 4: Call chapters function
    chapters_str = api.chapters(setting_str, str(num), outline)
    print(chapters_str)
    save_to_file('outline/chapters.txt', chapters_str)

    # Step 5: Modify chapters if needed
    while True:
        print("Enter y to confirm or enter changes")
        user_input = input().strip()
        if user_input.lower() == 'y':
            break
        chapters_str = api.modify_chapters(user_input, str(num), chapters_str)
        print(chapters_str)
        save_to_file('outline/chapters.txt', chapters_str)

    # Step 6: Save chapters to individual files
    chapters_list = chapters_str.split('\n')
    for chapter in chapters_list:
        if chapter:
            chapter_num = chapter.split()[0]
            save_to_file(f'outline/{chapter_num}.txt', chapter)

    # Step 7: Call title function
    title_str = api.title(setting_str, chapters_str)
    print(title_str)
    ensure_directory_exists('title')
    save_to_file('title/title.txt', title_str)

    # Step 8: Modify title if needed
    while True:
        print("Enter y to confirm or enter changes")
        user_input = input().strip()
        if user_input.lower() == 'y':
            break
        title_str = api.modify_title(setting_str, chapters_str, title_str, user_input)
        print(title_str)
        save_to_file('title/title.txt', title_str)

if __name__ == "__main__":
    main()
```

### Procedure checks and modifications

1. **Folder creation**: The `ensure_directory_exists` function ensures that the folder exists, and creates it if it does not. 2. **File reading and writing**: `save_to_file` and `read_from_file` functions are used to save and read the contents of a file respectively, using UTF-8 encoding. 3. **User Input Processing**: At each place where user input is required, the programme prompts the user for input and decides whether to proceed with the modification based on the input. 4. **Function calls**: the programme calls the functions in `api.py` correctly, passing the correct arguments.

### Modifications

- **Input processing**: when processing user input, make sure the input is formatted correctly, e.g. `num` should be a number. - **File paths**: make sure file paths are correct, especially when saving and reading files. - **Function calls**: make sure that the functions in `api.py` are defined correctly and that the arguments and return values are as expected.

This program should meet your needs, please let me know if you have any questions or need further modifications.