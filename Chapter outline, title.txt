User:Write a Python programme according to the following requirements, check the programme after answering and modify the programme if it is wrong Note: 1. For the folder mentioned later, create the folder if it doesn't exist 2. The functions mentioned later are located in api.py in the current directory, which needs to be imported and the corresponding functions called. Functions include input and output functions, save and read files through this module to achieve the function. Function parameters for the previous steps to create the corresponding name of the string, all parameters for the string form 3. Save and read the file using utf-8 encoding, the file does not exist to create a file, save the file content to cover 4. Note that the conversion of the number of numbers represented by a string and an integer represented by the number of comparisons to ensure that the type of integer input procedures: 1. the current directory under thesetting The contents of setting.txt in the folder setting in the current directory are saved to the setting string, and the contents of num.txt are numbers, which are saved to the integer num. 2. Create the integer seq, with an initial value of 1. 3. There are several txt files with integer filenames in the folder online in the current directory. to chapter_current string, when seq>1 when the file name of the integer = seq-1 txt file content saved to chapter_last string, when seq<num when the file name of the integer = seq + 1 txt file saved to chapter_next string, repeat this step when seq change 4. when seq=1 call chapter_first(chapter_next,chapter_current) function, seq>1 and seq<num with chapter_mid(chapter_last,chapter_next,chapter_current) function. seq=num call chapter_last(chapter_last,chapter_current) function. The above functions return content saved to the chapter string. Call chapter_title(chapter) function, the content of the return to the function called seq value for the file name, saved in txt format to the current directory title folder. Split the contents of the chapter string by newline, split it and save it in txt format to a folder named after the value of the current seq in the chapter folder in the current directory using the number at the beginning of each part as the filename. This step uses multi-threading, each thread created seq value plus 1, create threads until seq = num. create threads at intervals of 0.1 seconds, the number of threads to reach 64 pause the creation of threads

Assistant:As per your requirement, I will write a Python script to implement the above functionality. This script will follow the steps and notes provided by you. Below is the detailed code implementation:

```python
import os
import re
import threading
import time
import api  # Assuming the api.py file is in the current directory

# Defining Global Variables
seq = 1
num = 0
setting = ""
chapter_current = ""
chapter_last = ""
chapter_next = ""
chapter = ""

# Read the contents of the file
def read_file(file_path):
    if not os.path.exists(file_path):
        return ""
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# Save the contents of the file
def save_file(file_path, content):
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(content)

# Get the integer in the filename
def get_file_number(file_name):
    match = re.match(r'(\d+)', file_name)
    return int(match.group(1)) if match else 0

# Thread function to process each seq
def process_seq(seq):
    global chapter_current, chapter_last, chapter_next, chapter

    # Reads the current, previous and next chapters
    outline_files = [f for f in os.listdir('outline') if f.endswith('.txt')]
    outline_files.sort(key=get_file_number)

    for file_name in outline_files:
        file_number = get_file_number(file_name)
        if file_number == seq:
            chapter_current = read_file(os.path.join('outline', file_name))
        elif file_number == seq - 1:
            chapter_last = read_file(os.path.join('outline', file_name))
        elif file_number == seq + 1:
            chapter_next = read_file(os.path.join('outline', file_name))

    # Call the corresponding function
    if seq == 1:
        chapter = api.chapter_first(chapter_next, chapter_current)
    elif seq > 1 and seq < num:
        chapter = api.chapter_mid(chapter_last, chapter_next, chapter_current)
    elif seq == num:
        chapter = api.chapter_last(chapter_last, chapter_current)

    # Save Title
    title_content = api.chapter_title(chapter)
    title_folder = 'title'
    if not os.path.exists(title_folder):
        os.makedirs(title_folder)
    save_file(os.path.join(title_folder, f'{seq}.txt'), title_content)

    # Save chapter content
    chapter_folder = os.path.join('chapter', str(seq))
    if not os.path.exists(chapter_folder):
        os.makedirs(chapter_folder)
    chapter_parts = chapter.split('\n')
    for part in chapter_parts:
        part_number = re.match(r'(\d+)', part)
        if part_number:
            part_number = part_number.group(1)
            save_file(os.path.join(chapter_folder, f'{part_number}.txt'), part)

# main function
def main():
    global seq, num, setting

    # read setting and num
    setting = read_file(os.path.join('setting', 'setting.txt'))
    num = int(read_file(os.path.join('setting', 'num.txt')))

    # Create threads and process each seq
    threads = []
    while seq <= num:
        if len(threads) >= 64:
            for t in threads:
                t.join()
            threads = []
        thread = threading.Thread(target=process_seq, args=(seq,))
        threads.append(thread)
        thread.start()
        seq += 1
        time.sleep(0.1)

    # Wait for all threads to complete
    for t in threads:
        t.join()

if __name__ == "__main__":
    main()
```

### Code Description: 1. **File reading and saving**: `read_file` and `save_file` functions are used to read and save the contents of the file, respectively. 2. 2. **Get integer in file name**: `get_file_number` function is used to extract the integer part from the file name. 3. **Thread processing function**: `process_seq` function handles the logic of each `seq`, including reading the section content, calling the corresponding function, and saving the title and section content. 4. **Main function**: `main` function is responsible for initialising global variables, reading `setting` and `num`, and creating and managing threads.

### Notes: - Make sure that the `api.py` file contains the `chapter_first`, `chapter_mid`, `chapter_last` and `chapter_title` functions. - The code assumes that the filename starts with an integer and that the integer in the filename is unique. - When the number of threads reaches 64, the creation of new threads is paused until the existing threads have finished.

This script should meet your needs, following the steps and notes you provided.

